/**
 * MULTIGRAPH
 *
 * Project for Mattia Zago Master Thesis
 *
 * (C) 2015 - Mattia Zago
 *
 */
package es.um.multigraph.decision.poolsappasitmoop;

import es.um.multigraph.decision.basegraph.JDialogNode;
import es.um.multigraph.decision.basegraph.Node;
import java.awt.Color;
import java.awt.Event;
import java.awt.event.KeyEvent;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.JSeparator;
import javax.swing.WindowConstants;

/**
 *
 * @author Mattia Zago <a href="mailto:dev@zagomattia.it">dev@zagomattia.it</a>
 */
public class BayesianJDialogNode extends JDialogNode {
    
    BayesianNode result;
    boolean priorMandatory = false;
    boolean posteriorMandatory = false;
    boolean unconditionalMandatory = false;
    boolean disableClose = false;
    
    public Node getResult() {
        return result;
    }
    
    /**
     * Creates new form JDialogNode
     * @param parent
     * @param modal
     */
    public BayesianJDialogNode(BayesianModelConfiguration parent, boolean modal) {
        super(parent, modal, null, null);
//        super.removeAll();
        initComponents();
        setLocationRelativeTo(parent);

    }
    
    public void overrideData(BayesianNode n) {
        result = n;
        this.ID_Value.setText(n.getID());
        this.LABEL_Value.setText(n.getLabel());
        this.EXPECTEDLOSS_Value.setText(String.format("%.2f", n.getExpectedLoss()).replaceAll(",", "."));
        this.EXPECTEDGAIN_Value.setText(String.format("%.2f", n.getExpectedGain()).replaceAll(",", "."));
        if(!n.getPriorPr().equals(Double.NaN))
            this.PRIOR_Value.setText(String.format("%.2f", n.getPriorPr()).replaceAll(",", "."));
        if(!n.getPosteriorPr().equals(Double.NaN))
            this.POSTERIOR_Value.setText(String.format("%.2f", n.getPosteriorPr()).replaceAll(",", "."));
        if(!n.getUnconditionalPr().equals(Double.NaN))
            this.UNCONDITIONAL_Value.setText(String.format("%.2f", n.getUnconditionalPr()).replaceAll(",", "."));
        
        someKeyAction(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BTN_SAVE = new javax.swing.JButton();
        BTN_CANCEL = new javax.swing.JButton();
        ID_Label = new javax.swing.JLabel();
        ID_Value = new javax.swing.JTextField();
        LABEL_Label = new javax.swing.JLabel();
        LABEL_Value = new javax.swing.JTextField();
        BTNID_Random = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        EXPECTEDGAIN_Label = new javax.swing.JLabel();
        EXPECTEDGAIN_Value = new javax.swing.JTextField();
        EXPECTEDLOSS_Value = new javax.swing.JTextField();
        EXPECTEDLOSS_Label = new javax.swing.JLabel();
        PRIOR_Label = new javax.swing.JLabel();
        PRIOR_Value = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        POSTERIOR_Value = new javax.swing.JTextField();
        POSTERIOR_Label = new javax.swing.JLabel();
        UNCONDITIONAL_Value = new javax.swing.JTextField();
        UNCONDITIONAL_Label = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Bayesian Node Configurator");
        setAlwaysOnTop(true);

        BTN_SAVE.setText("SAVE");
        BTN_SAVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SAVEActionPerformed(evt);
            }
        });

        BTN_CANCEL.setText("CANCEL");
        BTN_CANCEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CANCELActionPerformed(evt);
            }
        });

        ID_Label.setText("ID");

        ID_Value.setBackground(this.wrong);
        ID_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
        });

        LABEL_Label.setText("Label");

        LABEL_Value.setBackground(this.wrong);
        LABEL_Value.setMaximumSize(new java.awt.Dimension(59, 20));
        LABEL_Value.setMinimumSize(new java.awt.Dimension(59, 20));
        LABEL_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
        });

        BTNID_Random.setText("Random");
        BTNID_Random.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNID_RandomActionPerformed(evt);
            }
        });

        EXPECTEDGAIN_Label.setText("Expected Gain");

        EXPECTEDGAIN_Value.setBackground(this.ok);
        EXPECTEDGAIN_Value.setText("0.0");
        EXPECTEDGAIN_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
        });

        EXPECTEDLOSS_Value.setBackground(this.ok);
        EXPECTEDLOSS_Value.setText("1.0");
        EXPECTEDLOSS_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
        });

        EXPECTEDLOSS_Label.setText("Expected Loss");

        PRIOR_Label.setText("Prior (*)");

        PRIOR_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
        });

        POSTERIOR_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
        });

        POSTERIOR_Label.setText("Posterior (*)");

        UNCONDITIONAL_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
        });

        UNCONDITIONAL_Label.setText("Unconditional (*)");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Probabilities (optional)");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Risk Parameters");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2)
                    .addComponent(jSeparator1)
                    .addComponent(BTN_SAVE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_CANCEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LABEL_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LABEL_Value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ID_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ID_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTNID_Random, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EXPECTEDGAIN_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EXPECTEDGAIN_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EXPECTEDLOSS_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(EXPECTEDLOSS_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(UNCONDITIONAL_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(POSTERIOR_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PRIOR_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PRIOR_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(POSTERIOR_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UNCONDITIONAL_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {EXPECTEDGAIN_Label, EXPECTEDLOSS_Label, POSTERIOR_Label, PRIOR_Label, UNCONDITIONAL_Label});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {EXPECTEDGAIN_Value, EXPECTEDLOSS_Value, POSTERIOR_Value, PRIOR_Value, UNCONDITIONAL_Value});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(BTNID_Random, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ID_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ID_Value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LABEL_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LABEL_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(EXPECTEDGAIN_Value)
                    .addComponent(EXPECTEDGAIN_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(EXPECTEDLOSS_Value)
                    .addComponent(EXPECTEDLOSS_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PRIOR_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PRIOR_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(POSTERIOR_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(POSTERIOR_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UNCONDITIONAL_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UNCONDITIONAL_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTN_SAVE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTN_CANCEL)
                .addGap(11, 11, 11))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {EXPECTEDGAIN_Label, EXPECTEDLOSS_Label, POSTERIOR_Label, PRIOR_Label, UNCONDITIONAL_Label});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {EXPECTEDGAIN_Value, EXPECTEDLOSS_Value, POSTERIOR_Value, PRIOR_Value, UNCONDITIONAL_Value});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTN_CANCELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CANCELActionPerformed
        dispose();
    }//GEN-LAST:event_BTN_CANCELActionPerformed

    private void BTN_SAVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SAVEActionPerformed
        
        if(ID_Value.getBackground().equals(wrong)) {
            JOptionPane.showMessageDialog(rootPane, "ID cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(LABEL_Value.getBackground().equals(wrong)) {
            JOptionPane.showMessageDialog(rootPane, "Label cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(EXPECTEDGAIN_Value.getBackground().equals(wrong)) {
            JOptionPane.showMessageDialog(rootPane, "Expected gain cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(EXPECTEDLOSS_Value.getBackground().equals(wrong)) {
            JOptionPane.showMessageDialog(rootPane, "Expected loss cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(PRIOR_Value.getBackground().equals(wrong)) {
            String message = "If you set a prior probability it must be a number between 0 and 1";
            if(priorMandatory)
                message = "Prior probability is mandatory for this node\nand it must be a number between 0 and 1";
            
            JOptionPane.showMessageDialog(rootPane, message, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(POSTERIOR_Value.getBackground().equals(wrong)) {
            String message = "If you set a posterior probability it must be a number between 0 and 1";
            if(posteriorMandatory)
                message = "Posterior probability is mandatory for this node\nand it must be a number between 0 and 1";
            
            JOptionPane.showMessageDialog(rootPane, message, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(UNCONDITIONAL_Value.getBackground().equals(wrong)) {
            String message = "If you set an unconditional probability it must be a number between 0 and 1";
            if(unconditionalMandatory)
                message = "Unconditional probability is mandatory for this node\nand it must be a number between 0 and 1";
            
            JOptionPane.showMessageDialog(rootPane, message, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(result == null)
            result = new BayesianNode("");
        
        result.setId(ID_Value.getText());
        result.setLabel(LABEL_Value.getText());
        result.setExpectedGain(Double.parseDouble(EXPECTEDGAIN_Value.getText()));
        result.setExpectedLoss(Double.parseDouble(EXPECTEDLOSS_Value.getText()));
        
        if(PRIOR_Value.getBackground().equals(ok)) {
            result.setPriorPr(Double.parseDouble(PRIOR_Value.getText()));
        }
        if(POSTERIOR_Value.getBackground().equals(ok)) {
            result.setPosteriorPr(Double.parseDouble(POSTERIOR_Value.getText()));
        }
        if(UNCONDITIONAL_Value.getBackground().equals(ok)) {
            result.setUnconditionalPr(Double.parseDouble(UNCONDITIONAL_Value.getText()));
        }
        
        System.out.println(result.getFullRepresentationAsString(true));
        
        dispose();
    }//GEN-LAST:event_BTN_SAVEActionPerformed

    private void BTNID_RandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNID_RandomActionPerformed
        String rnd = "N"+UUID.randomUUID().toString().substring(0, 3).replaceAll("-", "");
        this.ID_Value.setText(rnd);
        this.LABEL_Value.setText("New node "+rnd);
        someKeyAction(null);
    }//GEN-LAST:event_BTNID_RandomActionPerformed

    private void someKeyAction(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_someKeyAction
        ID_Value.setBackground(ID_Value.getText().isEmpty()?wrong:ok);
        LABEL_Value.setBackground(LABEL_Value.getText().isEmpty()?wrong:ok);
        
        try {
            Double.parseDouble(EXPECTEDGAIN_Value.getText());
            EXPECTEDGAIN_Value.setBackground(ok);
        } catch (Exception e) {
            EXPECTEDGAIN_Value.setBackground(wrong);
        }
        try {
            Double.parseDouble(EXPECTEDLOSS_Value.getText());
            EXPECTEDLOSS_Value.setBackground(ok);
        } catch (Exception e) {
            EXPECTEDLOSS_Value.setBackground(wrong);
        }
        
        if(!PRIOR_Value.getText().isEmpty() || (priorMandatory && PRIOR_Value.getText().isEmpty())) {
            try {
                if(Double.parseDouble(PRIOR_Value.getText()) <= 1d)
                    PRIOR_Value.setBackground(ok);
                else 
                    PRIOR_Value.setBackground(wrong);
            } catch (Exception e) {
                PRIOR_Value.setBackground(wrong);
            }
        } else {
            PRIOR_Value.setBackground(clear);
        }
        
        if(!POSTERIOR_Value.getText().isEmpty() || (posteriorMandatory && POSTERIOR_Value.getText().isEmpty())) {
            try {
                if(Double.parseDouble(POSTERIOR_Value.getText()) <= 1d)
                    POSTERIOR_Value.setBackground(ok);
                else 
                    POSTERIOR_Value.setBackground(wrong);
            } catch (Exception e) {
                POSTERIOR_Value.setBackground(wrong);
            }
        } else {
            POSTERIOR_Value.setBackground(clear);
        }
        
        if(!UNCONDITIONAL_Value.getText().isEmpty() || (unconditionalMandatory && UNCONDITIONAL_Value.getText().isEmpty())) {
            try {
                if(Double.parseDouble(UNCONDITIONAL_Value.getText()) <= 1d)
                    UNCONDITIONAL_Value.setBackground(ok);
                else 
                    UNCONDITIONAL_Value.setBackground(wrong);
            } catch (Exception e) {
                UNCONDITIONAL_Value.setBackground(wrong);
            }
        } else {
            UNCONDITIONAL_Value.setBackground(clear);
        }
        
        if(disableClose) {
            this.setDefaultCloseOperation(JDialogNode.DO_NOTHING_ON_CLOSE);
            this.BTN_CANCEL.setEnabled(false);
        } else {
            this.setDefaultCloseOperation(JDialogNode.DISPOSE_ON_CLOSE);
            this.BTN_CANCEL.setEnabled(true);
        }
        
        if(priorMandatory) {
            this.PRIOR_Label.setText(PRIOR_Label.getText().replace("(", "").replace(")", "").replace("*", ""));
        }
        if(posteriorMandatory) {
            this.POSTERIOR_Label.setText(POSTERIOR_Label.getText().replace("(", "").replace(")", "").replace("*", ""));
        }
        if(unconditionalMandatory) {
            this.UNCONDITIONAL_Label.setText(UNCONDITIONAL_Label.getText().replace("(", "").replace(")", "").replace("*", ""));
        }
        
    }//GEN-LAST:event_someKeyAction

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNID_Random;
    private javax.swing.JButton BTN_CANCEL;
    private javax.swing.JButton BTN_SAVE;
    private javax.swing.JLabel EXPECTEDGAIN_Label;
    private javax.swing.JTextField EXPECTEDGAIN_Value;
    private javax.swing.JLabel EXPECTEDLOSS_Label;
    private javax.swing.JTextField EXPECTEDLOSS_Value;
    private javax.swing.JLabel ID_Label;
    private javax.swing.JTextField ID_Value;
    private javax.swing.JLabel LABEL_Label;
    private javax.swing.JTextField LABEL_Value;
    private javax.swing.JLabel POSTERIOR_Label;
    private javax.swing.JTextField POSTERIOR_Value;
    private javax.swing.JLabel PRIOR_Label;
    private javax.swing.JTextField PRIOR_Value;
    private javax.swing.JLabel UNCONDITIONAL_Label;
    private javax.swing.JTextField UNCONDITIONAL_Value;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
    
    private static final Color wrong = new Color(255, 153, 153);
    private static final Color ok = new Color(153, 255, 153);
    private static final Color clear = new Color(255, 255, 255);

    public boolean isPriorMandatory() {
        return priorMandatory;
    }

    public void setPriorMandatory(boolean priorMandatory) {
        this.priorMandatory = priorMandatory;
        someKeyAction(null);
    }

    public boolean isPosteriorMandatory() {
        return posteriorMandatory;
    }

    public void setPosteriorMandatory(boolean posteriorMandatory) {
        this.posteriorMandatory = posteriorMandatory;
        someKeyAction(null);
    }

    public boolean isUnconditionalMandatory() {
        return unconditionalMandatory;
    }

    public void setUnconditionalMandatory(boolean unconditionalMandatory) {
        this.unconditionalMandatory = unconditionalMandatory;
        someKeyAction(null);
    }

    public boolean isDisableClose() {
        return disableClose;
    }

    public void setDisableClose(boolean disableClose) {
        this.disableClose = disableClose;
        someKeyAction(null);
    } 
    
}
