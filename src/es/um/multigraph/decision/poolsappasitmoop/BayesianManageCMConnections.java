/**
 * MULTIGRAPH
 *
 * Project for Mattia Zago Master Thesis
 *
 * (C) 2015 - Mattia Zago
 *
 */
package es.um.multigraph.decision.poolsappasitmoop;

import es.um.multigraph.decision.basegraph.Edge;
import es.um.multigraph.decision.basegraph.ListModelEdges;
import es.um.multigraph.decision.basegraph.Node;
import javax.swing.JOptionPane;

/**
 *
 * @author Mattia Zago <a href="mailto:dev@zagomattia.it">dev@zagomattia.it</a>
 */
public class BayesianManageCMConnections extends javax.swing.JDialog {

    BayesianAttackGraphAdapted model;
    BayesianModelConfiguration parent;

    /**
     * Creates new form BayesianCMJDialogEdge
     */
    public BayesianManageCMConnections(BayesianModelConfiguration parent, BayesianAttackGraphAdapted model) {
        super(parent, false);
        this.setLocationRelativeTo(parent);
        this.setModal(false);
        this.model = model;
        this.parent = parent;
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BTN_Edge_Add = new javax.swing.JButton();
        BTN_Edge_Delete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Edges_List = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Bayesian Countermeasure Connections Manager");

        BTN_Edge_Add.setText("Add Connection");
        BTN_Edge_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Edge_AddActionPerformed(evt);
            }
        });

        BTN_Edge_Delete.setText("Delete Connection");
        BTN_Edge_Delete.setEnabled(Edges_List.getModel().getSize() > 0);
        BTN_Edge_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Edge_DeleteActionPerformed(evt);
            }
        });

        Edges_List.setModel(new ListModelEdges(this.model.getCMEdges()));
        Edges_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(Edges_List);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BTN_Edge_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_Edge_Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTN_Edge_Add)
                    .addComponent(BTN_Edge_Delete))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTN_Edge_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Edge_DeleteActionPerformed
        Edge selected = (Edge) this.Edges_List.getSelectedValue();
        int response = JOptionPane.showConfirmDialog(null, "Do you want to delete this connection?\n" + selected.toString(), "Confirm delete",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            this.model.delEdge(selected);
            if(selected.getFrom().getOut().isEmpty())
                this.model.disableCM((BayesianCMNode) selected.getFrom());
            
            JOptionPane.showMessageDialog(rootPane, "You need to recompute LCPD table in order to perform probability operations", "LCPD out of date", JOptionPane.INFORMATION_MESSAGE);
            this.model.resetLCPD();
            
            this.updateAllListField();
            parent.updateAllListField();
        }
    }//GEN-LAST:event_BTN_Edge_DeleteActionPerformed

    private void BTN_Edge_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Edge_AddActionPerformed
        BayesianJDialogCMEdge x = new BayesianJDialogCMEdge(null, true, model);
        x.setVisible(true);
        if (x.from != null && x.to != null && x.pr != Double.NaN) {
            BayesianCMEdge e = new BayesianCMEdge(x.from.getID() + "-" + x.to.getID(), x.from, x.to);
            e.setOverridePrActivable(x.pr);

            this.model.resetLCPD();
            this.model.addEdge(e);
            this.model.enableCM((BayesianCMNode) x.from);
            
            this.model.computeLCPD();
            
            JOptionPane.showMessageDialog(parent, "You need to update the LCPD table values", "LCPD update required", JOptionPane.INFORMATION_MESSAGE);
            
            BayesianLCPDTableViewer viewLCPD = new BayesianLCPDTableViewer(model, x.to);
            viewLCPD.enableEdit();
            viewLCPD.setVisible(true);
            
            this.updateAllListField();
            parent.updateAllListField();
        }
    }//GEN-LAST:event_BTN_Edge_AddActionPerformed

    public void updateAllListField() {
        this.Edges_List.setModel(new ListModelEdges(this.model.getCMEdges()));
        if (this.Edges_List.getModel().getSize() > 0) {
            this.Edges_List.setSelectedIndex(0);
            this.BTN_Edge_Delete.setEnabled(true);
        } else {
            this.Edges_List.setSelectedIndex(-1);
            this.BTN_Edge_Delete.setEnabled(false);
        }
        this.Edges_List.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_Edge_Add;
    private javax.swing.JButton BTN_Edge_Delete;
    private javax.swing.JList Edges_List;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
