/**
 * MULTIGRAPH
 *
 * Project for Mattia Zago Master Thesis
 *
 * (C) 2015 - Mattia Zago
 *
 */
package es.um.multigraph.decision.poolsappasitmoop;

import es.um.multigraph.decision.basegraph.JDialogNode;
import es.um.multigraph.decision.basegraph.Node;
import es.um.multigraph.event.solution.Solution;
import java.awt.Color;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mattia Zago <a href="mailto:dev@zagomattia.it">dev@zagomattia.it</a>
 */
public class BayesianJDialogCMNode extends JDialogNode {

    BayesianCMNode result;
    
    @Override
    public Node getResult() {
        return result;
    }

    /**
     * Creates new form JDialogNode
     *
     * @param parent
     * @param modal
     */
    public BayesianJDialogCMNode(BayesianModelConfiguration parent, boolean modal) {
        super(parent, modal, null, null);
        initComponents();
        setLocationRelativeTo(parent);
        this.CM_Family.setSelectedIndex(0);
    }

    public void overrideData(BayesianCMNode n) {
        this.result = n;
        this.ID_Value.setText(n.getID());
        this.LABEL_Value.setText(n.getLabel());
        this.Cost_Value.setText(String.format("%+.2f", n.getCountermeasure().getCost()).replaceAll(",", "."));
        Class<? extends Solution> c = n.getCountermeasure().getClass();

        this.CM_Family.setSelectedItem(c);

        someKeyAction(null);
    }

    public static void main(String[] args) {
        new BayesianJDialogCMNode(null, true).setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BTN_SAVE = new javax.swing.JButton();
        BTN_CANCEL = new javax.swing.JButton();
        ID_Label = new javax.swing.JLabel();
        ID_Value = new javax.swing.JTextField();
        LABEL_Label = new javax.swing.JLabel();
        LABEL_Value = new javax.swing.JTextField();
        BTNID_Random = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        CM_Family = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        CM_Value = new javax.swing.JList();
        Cost_Label = new javax.swing.JLabel();
        Cost_Value = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Bayesian Node Configurator");
        setAlwaysOnTop(true);

        BTN_SAVE.setText("SAVE");
        BTN_SAVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SAVEActionPerformed(evt);
            }
        });

        BTN_CANCEL.setText("CANCEL");
        BTN_CANCEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_CANCELActionPerformed(evt);
            }
        });

        ID_Label.setText("ID");

        ID_Value.setBackground(this.wrong);
        ID_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
        });

        LABEL_Label.setText("Label");

        LABEL_Value.setBackground(this.wrong);
        LABEL_Value.setMaximumSize(new java.awt.Dimension(59, 20));
        LABEL_Value.setMinimumSize(new java.awt.Dimension(59, 20));
        LABEL_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
        });

        BTNID_Random.setText("Random");
        BTNID_Random.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNID_RandomActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("CounterMeasure");

        CM_Family.setModel(BayesianCMNode.getListModel());
        CM_Family.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CM_FamilyActionPerformed(evt);
            }
        });

        CM_Value.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(CM_Value);

        Cost_Label.setText("Cost");

        Cost_Value.setText("1.0");
        Cost_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                someKeyAction(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3)
                    .addComponent(jSeparator1)
                    .addComponent(BTN_SAVE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_CANCEL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ID_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ID_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTNID_Random, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CM_Family, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(Cost_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LABEL_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LABEL_Value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Cost_Value))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(BTNID_Random, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ID_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ID_Value, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LABEL_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LABEL_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Cost_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Cost_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CM_Family, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTN_SAVE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTN_CANCEL)
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTN_CANCELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_CANCELActionPerformed
        dispose();
    }//GEN-LAST:event_BTN_CANCELActionPerformed

    private void BTN_SAVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SAVEActionPerformed

        if (ID_Value.getBackground().equals(wrong)) {
            JOptionPane.showMessageDialog(rootPane, "ID cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (LABEL_Value.getBackground().equals(wrong)) {
            JOptionPane.showMessageDialog(rootPane, "Label cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (Cost_Value.getBackground().equals(wrong)) {
            JOptionPane.showMessageDialog(rootPane, "Cost must be a valid double, greater than 0", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(result == null)
            result = new BayesianCMNode("", es.um.multigraph.event.solution.AC_AccessControl.GENERIC);
        
        result.setId(ID_Value.getText());
        result.setLabel(LABEL_Value.getText());
        result.setCountermeasure((Solution)CM_Value.getSelectedValue());
        result.getCountermeasure().setCost(cost);

        //System.out.println(result.getFullRepresentationAsString(true));

        dispose();
    }//GEN-LAST:event_BTN_SAVEActionPerformed

    private void BTNID_RandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNID_RandomActionPerformed
        String rnd = "N" + UUID.randomUUID().toString().substring(0, 3).replaceAll("-", "");
        this.ID_Value.setText(rnd);
        this.LABEL_Value.setText("New node " + rnd);
        someKeyAction(null);
    }//GEN-LAST:event_BTNID_RandomActionPerformed

    private void someKeyAction(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_someKeyAction
        ID_Value.setBackground(ID_Value.getText().isEmpty() ? wrong : ok);
        LABEL_Value.setBackground(LABEL_Value.getText().isEmpty() ? wrong : ok);
        try {
           cost = Double.parseDouble(Cost_Value.getText().replaceAll(",", "."));
           if(cost < 0) {
               throw new NumberFormatException("Cost must be greater than 0");
           }
           Cost_Value.setBackground(ok);
        } catch (NumberFormatException ex) {
            Cost_Value.setBackground(wrong);
        }
    }//GEN-LAST:event_someKeyAction

    private void CM_FamilyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CM_FamilyActionPerformed
        Class<? extends Solution> x = (Class<? extends Solution>) CM_Family.getSelectedItem();
        if (CM_Family.getSelectedItem() != null) {
            try {
                CM_Value.setModel(x.getEnumConstants()[0].getListModel());
            } catch (Exception ex) {
                Logger.getLogger(BayesianJDialogCMNode.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(CM_Value.getModel().getSize() > 0 && result != null) {
                CM_Value.setSelectedValue(result.getCountermeasure(), true);
            } else {
                CM_Value.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_CM_FamilyActionPerformed

    Double cost = Double.NaN;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNID_Random;
    private javax.swing.JButton BTN_CANCEL;
    private javax.swing.JButton BTN_SAVE;
    private javax.swing.JComboBox CM_Family;
    private javax.swing.JList CM_Value;
    private javax.swing.JLabel Cost_Label;
    private javax.swing.JTextField Cost_Value;
    private javax.swing.JLabel ID_Label;
    private javax.swing.JTextField ID_Value;
    private javax.swing.JLabel LABEL_Label;
    private javax.swing.JTextField LABEL_Value;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables

    private static final Color wrong = new Color(255, 153, 153);
    private static final Color ok = new Color(153, 255, 153);
    private static final Color clear = new Color(255, 255, 255);
}
