/**
 * MULTIGRAPH
 *
 * Project for Mattia Zago Master Thesis
 *
 * (C) 2015 - Mattia Zago
 *
 */
package es.um.multigraph.decision.poolsappasitmoop;

import es.um.multigraph.core.MainClass;
import es.um.multigraph.decision.basegraph.Edge;
import es.um.multigraph.decision.basegraph.JDialogNode;
import es.um.multigraph.decision.basegraph.ListModelEdges;
import es.um.multigraph.decision.basegraph.ListModelNodes;
import es.um.multigraph.decision.basegraph.Node;
import java.awt.Color;
import java.awt.Desktop;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Mattia Zago <a href="mailto:dev@zagomattia.it">dev@zagomattia.it</a>
 */
public final class BayesianModelConfiguration extends JFrame {

    MainClass parent;
    BayesianAttackGraphAdapted model;
    BayesianManageCMConnections CMconn;

    /**
     * Creates new form ModelConfiguration
     *
     * @param parent
     * @param model
     */
    public BayesianModelConfiguration(MainClass parent, BayesianAttackGraphAdapted model) {
        super();
        this.parent = parent;
        this.model = model;
        initComponents();
        this.updateAllListField();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        LossGainRadio = new javax.swing.ButtonGroup();
        Panel_ModelData = new javax.swing.JPanel();
        ModelData_Name_Label = new javax.swing.JLabel();
        ModelData_Authors_Label = new javax.swing.JLabel();
        ModelData_Authors_Field = new javax.swing.JTextField();
        ModelData_DOI_Label = new javax.swing.JLabel();
        ModelData_DOI_Field = new javax.swing.JTextField();
        ModelData_TITLE_value = new javax.swing.JTextField();
        Panel_ModelNodes = new javax.swing.JPanel();
        BTN_BayesianNode_Edit = new javax.swing.JButton();
        BTN_BayesianNode_Del = new javax.swing.JButton();
        BTN_BayesianNode_Add = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Nodes_List = new javax.swing.JList();
        Panel_ModelEdges = new javax.swing.JPanel();
        BTN_Edge_Edit = new javax.swing.JButton();
        BTN_Edge_Delete = new javax.swing.JButton();
        BTN_Edge_Add = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Edges_List = new javax.swing.JList();
        Panel_ModelOperations = new javax.swing.JPanel();
        BTN_ComputeLCPD = new javax.swing.JButton();
        BTN_ComputeUnconditional = new javax.swing.JButton();
        BTN_ComputePosterior = new javax.swing.JButton();
        BTN_ShowLCPD = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        LOSS_Label = new javax.swing.JLabel();
        LOSS_Value = new javax.swing.JTextField();
        GAIN_Value = new javax.swing.JTextField();
        GAIN_Label = new javax.swing.JLabel();
        POOL_Label = new javax.swing.JLabel();
        CROSS_Label = new javax.swing.JLabel();
        MUTATION_Label = new javax.swing.JLabel();
        RATIO_Label = new javax.swing.JLabel();
        POOL_Value = new javax.swing.JTextField();
        RATIO_Value = new javax.swing.JTextField();
        MUTATION_Value = new javax.swing.JTextField();
        CROSS_Value = new javax.swing.JTextField();
        RADIO_Loss = new javax.swing.JRadioButton();
        RADIO_Gain = new javax.swing.JRadioButton();
        BTN_SOOP = new javax.swing.JButton();
        ObjectiveFunction = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        Panel_ModelNodes3 = new javax.swing.JPanel();
        BTN_Evidence_Add = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        Evidence_List = new javax.swing.JList();
        Panel_ModelCM = new javax.swing.JPanel();
        BTN_BayesianCMNode_Add = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        CM_List = new javax.swing.JList();
        BTN_BayesianCMNode_Del = new javax.swing.JButton();
        BTN_BayesianCMNode_Conn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Bayesian Graph Configurator");

        Panel_ModelData.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Data"));

        ModelData_Name_Label.setText("Name");

        ModelData_Authors_Label.setText("Authors");

        ModelData_Authors_Field.setEditable(false);
        ModelData_Authors_Field.setText(this.model.getPaperAuthors());
        ModelData_Authors_Field.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        ModelData_DOI_Label.setText("DOI");

        ModelData_DOI_Field.setEditable(false);
        ModelData_DOI_Field.setText(this.model.getPaperDOI().toString());
        ModelData_DOI_Field.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ModelData_DOI_Field.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        ModelData_DOI_Field.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ModelData_DOI_FieldMouseClicked(evt);
            }
        });

        ModelData_TITLE_value.setEditable(false);
        ModelData_TITLE_value.setText(this.model.getPaperName());
        ModelData_TITLE_value.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        ModelData_TITLE_value.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout Panel_ModelDataLayout = new javax.swing.GroupLayout(Panel_ModelData);
        Panel_ModelData.setLayout(Panel_ModelDataLayout);
        Panel_ModelDataLayout.setHorizontalGroup(
            Panel_ModelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_ModelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ModelData_Authors_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(ModelData_Name_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_ModelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_ModelDataLayout.createSequentialGroup()
                        .addComponent(ModelData_Authors_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ModelData_DOI_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ModelData_DOI_Field))
                    .addComponent(ModelData_TITLE_value))
                .addContainerGap())
        );

        Panel_ModelDataLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ModelData_Authors_Label, ModelData_Name_Label});

        Panel_ModelDataLayout.setVerticalGroup(
            Panel_ModelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_ModelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ModelData_Name_Label)
                    .addComponent(ModelData_TITLE_value))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_ModelDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ModelData_Authors_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ModelData_Authors_Field)
                    .addComponent(ModelData_DOI_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ModelData_DOI_Field))
                .addContainerGap())
        );

        Panel_ModelDataLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ModelData_Authors_Label, ModelData_DOI_Label, ModelData_Name_Label});

        Panel_ModelNodes.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Data - Nodes"));

        BTN_BayesianNode_Edit.setText("Edit Node");
        BTN_BayesianNode_Edit.setEnabled(false);
        BTN_BayesianNode_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_BayesianNode_EditActionPerformed(evt);
            }
        });

        BTN_BayesianNode_Del.setText("Delete Node");
        BTN_BayesianNode_Del.setEnabled(this.Nodes_List.getModel().getSize() > 0);
        BTN_BayesianNode_Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_BayesianNode_DelActionPerformed(evt);
            }
        });

        BTN_BayesianNode_Add.setText("Add Node");
        BTN_BayesianNode_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_BayesianNode_AddActionPerformed(evt);
            }
        });

        Nodes_List.setModel(new ListModelNodes(model.getNodes()));
        Nodes_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(Nodes_List);

        javax.swing.GroupLayout Panel_ModelNodesLayout = new javax.swing.GroupLayout(Panel_ModelNodes);
        Panel_ModelNodes.setLayout(Panel_ModelNodesLayout);
        Panel_ModelNodesLayout.setHorizontalGroup(
            Panel_ModelNodesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelNodesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_ModelNodesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_ModelNodesLayout.createSequentialGroup()
                        .addComponent(BTN_BayesianNode_Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_BayesianNode_Del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_BayesianNode_Edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        Panel_ModelNodesLayout.setVerticalGroup(
            Panel_ModelNodesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelNodesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_ModelNodesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTN_BayesianNode_Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_BayesianNode_Del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_BayesianNode_Edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        Panel_ModelEdges.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Data - Edges"));

        BTN_Edge_Edit.setText("Edit Edge");
        BTN_Edge_Edit.setEnabled(false);
        BTN_Edge_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Edge_EditActionPerformed(evt);
            }
        });

        BTN_Edge_Delete.setText("Delete Edge");
        BTN_Edge_Delete.setEnabled(Edges_List.getModel().getSize() > 0);
        BTN_Edge_Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Edge_DeleteActionPerformed(evt);
            }
        });

        BTN_Edge_Add.setText("Add Edge");
        BTN_Edge_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Edge_AddActionPerformed(evt);
            }
        });

        Edges_List.setModel(new ListModelEdges(model.getEdges()));
        Edges_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(Edges_List);

        javax.swing.GroupLayout Panel_ModelEdgesLayout = new javax.swing.GroupLayout(Panel_ModelEdges);
        Panel_ModelEdges.setLayout(Panel_ModelEdgesLayout);
        Panel_ModelEdgesLayout.setHorizontalGroup(
            Panel_ModelEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelEdgesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_ModelEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel_ModelEdgesLayout.createSequentialGroup()
                        .addComponent(BTN_Edge_Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_Edge_Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_Edge_Edit, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        Panel_ModelEdgesLayout.setVerticalGroup(
            Panel_ModelEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelEdgesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_ModelEdgesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTN_Edge_Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_Edge_Delete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_Edge_Edit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        Panel_ModelOperations.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Data - Operation"));

        BTN_ComputeLCPD.setText("Compute LCPD Table");
        BTN_ComputeLCPD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_ComputeLCPDActionPerformed(evt);
            }
        });

        BTN_ComputeUnconditional.setText("Compute Unconditional Probabilities");
        BTN_ComputeUnconditional.setEnabled(this.model.isLCPDComputed());
        BTN_ComputeUnconditional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_ComputeUnconditionalActionPerformed(evt);
            }
        });

        BTN_ComputePosterior.setText("Compute Posterior Probabilities");
        BTN_ComputePosterior.setEnabled(this.model.isLCPDComputed() && this.model.isUnconditionalPrComputed());
        BTN_ComputePosterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_ComputePosteriorActionPerformed(evt);
            }
        });

        BTN_ShowLCPD.setText("Show LCPD Table");
        BTN_ShowLCPD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_ShowLCPDActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("SOOP"));

        LOSS_Label.setText("Loss");

        LOSS_Value.setBackground(this.wrong);
        LOSS_Value.setText(String.format("%.2f", this.model.getExpectedLossWeight()).replaceAll(",", "."));
        LOSS_Value.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, RADIO_Loss, org.jdesktop.beansbinding.ELProperty.create("${selected}"), LOSS_Value, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        LOSS_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
        });

        GAIN_Value.setBackground(this.wrong);
        GAIN_Value.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, RADIO_Gain, org.jdesktop.beansbinding.ELProperty.create("${selected}"), GAIN_Value, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        GAIN_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
        });

        GAIN_Label.setText("Gain");

        POOL_Label.setText("Pool Size");

        CROSS_Label.setText("CrossOver ");

        MUTATION_Label.setText("Mutations");

        RATIO_Label.setText("Decrease Ratio");

        POOL_Value.setBackground(this.wrong);
        POOL_Value.setText("4");
        POOL_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
        });

        RATIO_Value.setBackground(this.wrong);
        RATIO_Value.setText("0.5");
        RATIO_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
        });

        MUTATION_Value.setBackground(this.wrong);
        MUTATION_Value.setText("1");
        MUTATION_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
        });

        CROSS_Value.setBackground(this.wrong);
        CROSS_Value.setText("1");
        CROSS_Value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SOOP_KeyTyped(evt);
            }
        });

        LossGainRadio.add(RADIO_Loss);
        RADIO_Loss.setSelected(true);

        LossGainRadio.add(RADIO_Gain);

        BTN_SOOP.setText("Run SOOP");
        BTN_SOOP.setEnabled(false);
        BTN_SOOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_SOOPActionPerformed(evt);
            }
        });

        ObjectiveFunction.setText("Obj.Funct: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(POOL_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(POOL_Value))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LOSS_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(GAIN_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(RADIO_Loss)
                            .addComponent(RADIO_Gain))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(GAIN_Value, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(LOSS_Value, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(ObjectiveFunction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BTN_SOOP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(RATIO_Label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(MUTATION_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(CROSS_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(MUTATION_Value, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CROSS_Value, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RATIO_Value, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LOSS_Label)
                            .addComponent(LOSS_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CROSS_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CROSS_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(GAIN_Label)
                            .addComponent(GAIN_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MUTATION_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MUTATION_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(RADIO_Loss)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RADIO_Gain)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(POOL_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(POOL_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RATIO_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RATIO_Value, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BTN_SOOP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ObjectiveFunction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {CROSS_Label, GAIN_Label, GAIN_Value, LOSS_Label, LOSS_Value, MUTATION_Label, POOL_Label, RATIO_Label});

        javax.swing.GroupLayout Panel_ModelOperationsLayout = new javax.swing.GroupLayout(Panel_ModelOperations);
        Panel_ModelOperations.setLayout(Panel_ModelOperationsLayout);
        Panel_ModelOperationsLayout.setHorizontalGroup(
            Panel_ModelOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelOperationsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_ModelOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(BTN_ComputeUnconditional, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_ComputePosterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_ShowLCPD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_ComputeLCPD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        Panel_ModelOperationsLayout.setVerticalGroup(
            Panel_ModelOperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelOperationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BTN_ComputeLCPD, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTN_ShowLCPD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTN_ComputeUnconditional)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BTN_ComputePosterior, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(Panel_ModelOperationsLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        Panel_ModelOperationsLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {BTN_ComputePosterior, BTN_ComputeUnconditional});

        Panel_ModelNodes3.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Data - Evidence"));

        BTN_Evidence_Add.setText("Add Evid.");
        BTN_Evidence_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_Evidence_AddActionPerformed(evt);
            }
        });

        Evidence_List.setModel(new ListModelNodes(model.getEvidenceNodes()));
        Evidence_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(Evidence_List);

        javax.swing.GroupLayout Panel_ModelNodes3Layout = new javax.swing.GroupLayout(Panel_ModelNodes3);
        Panel_ModelNodes3.setLayout(Panel_ModelNodes3Layout);
        Panel_ModelNodes3Layout.setHorizontalGroup(
            Panel_ModelNodes3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelNodes3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_ModelNodes3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addComponent(BTN_Evidence_Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        Panel_ModelNodes3Layout.setVerticalGroup(
            Panel_ModelNodes3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelNodes3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BTN_Evidence_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5)
                .addContainerGap())
        );

        Panel_ModelCM.setBorder(javax.swing.BorderFactory.createTitledBorder("Model Data - CounterMeasure"));

        BTN_BayesianCMNode_Add.setText("Add");
        BTN_BayesianCMNode_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_BayesianCMNode_AddActionPerformed(evt);
            }
        });

        CM_List.setModel(new ListModelNodes(model.getCMNodes()));
        CM_List.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane6.setViewportView(CM_List);

        BTN_BayesianCMNode_Del.setText("Delete");
        BTN_BayesianCMNode_Del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_BayesianCMNode_DelActionPerformed(evt);
            }
        });

        BTN_BayesianCMNode_Conn.setText("Connections");
        BTN_BayesianCMNode_Conn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_BayesianCMNode_ConnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Panel_ModelCMLayout = new javax.swing.GroupLayout(Panel_ModelCM);
        Panel_ModelCM.setLayout(Panel_ModelCMLayout);
        Panel_ModelCMLayout.setHorizontalGroup(
            Panel_ModelCMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelCMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_ModelCMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addGroup(Panel_ModelCMLayout.createSequentialGroup()
                        .addComponent(BTN_BayesianCMNode_Add, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_BayesianCMNode_Del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BTN_BayesianCMNode_Conn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addContainerGap())
        );
        Panel_ModelCMLayout.setVerticalGroup(
            Panel_ModelCMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_ModelCMLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Panel_ModelCMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BTN_BayesianCMNode_Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_BayesianCMNode_Del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BTN_BayesianCMNode_Conn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Panel_ModelData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Panel_ModelOperations, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Panel_ModelNodes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Panel_ModelEdges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Panel_ModelCM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Panel_ModelNodes3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {Panel_ModelCM, Panel_ModelEdges, Panel_ModelNodes, Panel_ModelNodes3});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Panel_ModelData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Panel_ModelNodes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Panel_ModelEdges, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Panel_ModelCM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Panel_ModelNodes3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Panel_ModelOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Panel_ModelCM, Panel_ModelEdges, Panel_ModelNodes, Panel_ModelNodes3});

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ModelData_DOI_FieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ModelData_DOI_FieldMouseClicked
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(this.model.getPaperDOI());
            } catch (IOException ex) {
                parent.log(ex.getMessage(), this);
            }
        }
    }//GEN-LAST:event_ModelData_DOI_FieldMouseClicked

    private void BTN_BayesianNode_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_BayesianNode_AddActionPerformed
        JDialogNode x = BayesianNode.getJDialog();
        x.setVisible(true);
        if (x.getResult() != null) {
            this.model.addNode(x.getResult());
            JOptionPane.showMessageDialog(rootPane, "You need to recompute LCPD table in order to perform probability operations", "LCPD out of date", JOptionPane.INFORMATION_MESSAGE);
            this.model.resetLCPD();
            this.updateAllListField();
        }

    }//GEN-LAST:event_BTN_BayesianNode_AddActionPerformed

    private void BTN_BayesianNode_DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_BayesianNode_DelActionPerformed
        Node selected = (Node) this.Nodes_List.getSelectedValue();
        int response = JOptionPane.showConfirmDialog(null, "Do you want to delete this node?\n" + selected.toString(), "Confirm delete",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            this.model.delNode(selected);
            JOptionPane.showMessageDialog(rootPane, "You need to recompute LCPD table in order to perform probability operations", "LCPD out of date", JOptionPane.INFORMATION_MESSAGE);
            this.model.resetLCPD();
            this.updateAllListField();
            this.parent.delNodeFromGraph(selected);
        }

    }//GEN-LAST:event_BTN_BayesianNode_DelActionPerformed

    private void BTN_ComputeLCPDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_ComputeLCPDActionPerformed
        this.model.computeLCPD();
        //this.parent.repaintGraph();
        for (Iterator it = model.getNodes().iterator(); it.hasNext();) {
            BayesianNode node = (BayesianNode) it.next();
            this.parent.setGraphLabel(node);
        }
        updateAllListField();
    }//GEN-LAST:event_BTN_ComputeLCPDActionPerformed

    private void BTN_ComputeUnconditionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_ComputeUnconditionalActionPerformed
        try {
            this.model.computeUnconditionalProbability(true);
        } catch (SQLException ex) {
            Logger.getLogger(BayesianModelConfiguration.class.getName()).log(Level.SEVERE, null, ex);
        }
        //this.parent.repaintGraph();
        for (Iterator it = model.getNodes().iterator(); it.hasNext();) {
            BayesianNode node = (BayesianNode) it.next();
            this.parent.setGraphLabel(node);
        }
        System.out.println("ObjF: " + (String.format("%+.2f", model.objectiveFunction()).replaceAll(",", ".")) + " " + model.securityControls.toString());
        updateAllListField();
    }//GEN-LAST:event_BTN_ComputeUnconditionalActionPerformed

    private void BTN_ComputePosteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_ComputePosteriorActionPerformed
        try {
            this.model.computePosterior(true);
        } catch (SQLException ex) {
            Logger.getLogger(BayesianModelConfiguration.class.getName()).log(Level.SEVERE, null, ex);
        }
        //this.parent.repaintGraph();
        for (Iterator it = model.getNodes().iterator(); it.hasNext();) {
            BayesianNode node = (BayesianNode) it.next();
            this.parent.setGraphLabel(node);
        }
        
        updateAllListField();
    }//GEN-LAST:event_BTN_ComputePosteriorActionPerformed

    private void BTN_Evidence_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Evidence_AddActionPerformed
        Object selected = JOptionPane.showInputDialog(rootPane, "Please select the compromised node", "Evidence Selector", JOptionPane.QUESTION_MESSAGE, null, this.model.getNodesNotCM().toArray(), this.model.getNodesNotCM().toArray()[0]);
        if (selected != null) {
            this.model.addCompromisedNode((BayesianNode) selected);
            this.updateAllListField();
            this.parent.setGraphLabel((BayesianNode) selected);
            this.parent.repaintGraph();
        }

    }//GEN-LAST:event_BTN_Evidence_AddActionPerformed

    private void BTN_BayesianCMNode_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_BayesianCMNode_AddActionPerformed
        JDialogNode x = BayesianCMNode.getJDialog();
        x.setVisible(true);
        if (x.getResult() != null) {
            this.model.addNode((BayesianCMNode) x.getResult());
            JOptionPane.showMessageDialog(rootPane, "You need to recompute LCPD table in order to perform probability operations", "LCPD out of date", JOptionPane.INFORMATION_MESSAGE);
            this.model.resetLCPD();

            this.updateAllListField();
        }
    }//GEN-LAST:event_BTN_BayesianCMNode_AddActionPerformed

    private void BTN_BayesianNode_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_BayesianNode_EditActionPerformed
        if (this.Nodes_List.getSelectedValue() instanceof BayesianCMNode) {
            BayesianJDialogCMNode x = new BayesianJDialogCMNode(this, true);
            x.overrideData((BayesianCMNode) this.Nodes_List.getSelectedValue());
            x.setVisible(true);
        } else {
            BayesianJDialogNode x = new BayesianJDialogNode(this, true);
            x.overrideData((BayesianNode) this.Nodes_List.getSelectedValue());
            x.setDisableClose(false);
            if (((BayesianNode) this.Nodes_List.getSelectedValue()).isExternal()) {
                x.setPriorMandatory(true);
            }
            x.setVisible(true);
            JOptionPane.showMessageDialog(rootPane, "You need to recompute LCPD table in order to perform probability operations", "LCPD out of date", JOptionPane.INFORMATION_MESSAGE);
            this.model.resetLCPD();
        }
        
        updateAllListField();
    }//GEN-LAST:event_BTN_BayesianNode_EditActionPerformed

    private void BTN_Edge_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Edge_AddActionPerformed
        BayesianJDialogEdge x = new BayesianJDialogEdge(this, true, model);
        x.setVisible(true);
        if (x.from != null && x.to != null && x.pr != Double.NaN) {
            BayesianEdge e = new BayesianEdge(x.from.getID() + "-" + x.to.getID(), x.from, x.to);
            if (x.fromCVSS) {
                e.setPrActivable(x.cvssBaseScore);
            } else {
                e.setOverridePrActivable(x.pr);
            }

            this.BTN_ComputePosterior.setEnabled(false);
            this.BTN_ComputeUnconditional.setEnabled(false);
            JOptionPane.showMessageDialog(rootPane, "You need to recompute LCPD table in order to perform probability operations", "LCPD out of date", JOptionPane.INFORMATION_MESSAGE);
            this.model.resetLCPD();
            this.model.addEdge(e);
            this.updateAllListField();

        }
    }//GEN-LAST:event_BTN_Edge_AddActionPerformed

    private void BTN_Edge_DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Edge_DeleteActionPerformed
        Edge selected = (Edge) this.Edges_List.getSelectedValue();
        int response = JOptionPane.showConfirmDialog(null, "Do you want to delete this edge?\n" + selected.toString(), "Confirm delete",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            this.model.delEdge(selected);
            JOptionPane.showMessageDialog(rootPane, "You need to recompute LCPD table in order to perform probability operations", "LCPD out of date", JOptionPane.INFORMATION_MESSAGE);
            this.model.resetLCPD();

            this.updateAllListField();
            this.parent.delEdgeFromGraph(selected);
        }
    }//GEN-LAST:event_BTN_Edge_DeleteActionPerformed

    private void BTN_Edge_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_Edge_EditActionPerformed
        BayesianJDialogEdge x = new BayesianJDialogEdge(this, true, model);
        x.overrideData((BayesianEdge) Edges_List.getSelectedValue());
        x.setVisible(true);
        this.updateAllListField();
    }//GEN-LAST:event_BTN_Edge_EditActionPerformed

    private void BTN_ShowLCPDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_ShowLCPDActionPerformed

        Node[] selectionValues = this.model.getNodes().toArray(new Node[this.model.getNodes().size()]);
        Node selected = selectionValues[0];

        Object x = JOptionPane.showInputDialog(rootPane, "Please select which LCPD table you wish to see.\nPress CANCEL to see the full table", "LCPD Table selector", JOptionPane.QUESTION_MESSAGE, null, selectionValues, selected);

        BayesianLCPDTableViewer viewLCPD = new BayesianLCPDTableViewer(model, (Node) x);
        viewLCPD.setVisible(true);
    }//GEN-LAST:event_BTN_ShowLCPDActionPerformed

    private void BTN_BayesianCMNode_DelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_BayesianCMNode_DelActionPerformed
        Node selected = (Node) this.CM_List.getSelectedValue();
        int response = JOptionPane.showConfirmDialog(null, "Do you want to delete this CM?\n" + selected.toString(), "Confirm delete",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {

            this.model.delNode(selected);
            JOptionPane.showMessageDialog(rootPane, "You need to recompute LCPD table in order to perform probability operations", "LCPD out of date", JOptionPane.INFORMATION_MESSAGE);
            this.model.resetLCPD();
            this.updateAllListField();
            this.parent.delNodeFromGraph(selected);
        }
    }//GEN-LAST:event_BTN_BayesianCMNode_DelActionPerformed

    private void BTN_BayesianCMNode_ConnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_BayesianCMNode_ConnActionPerformed
        CMconn = new BayesianManageCMConnections(this, model);
        CMconn.setVisible(true);
        this.updateAllListField();
    }//GEN-LAST:event_BTN_BayesianCMNode_ConnActionPerformed

    public boolean proceed = false;

    Double loss = Double.NaN;
    Double gain = Double.NaN;
    Integer pool_size = null;
    Integer crossover = null;
    Integer mutation = null;
    Double ratio = Double.NaN;
    private static final Color wrong = new Color(255, 153, 153);
    private static final Color ok = new Color(153, 255, 153);
    private static final Color clear = new Color(255, 255, 255);


    private void BTN_SOOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_SOOPActionPerformed
        model.setExpectedGainWeight(gain);
        model.setExpectedLossWeight(loss);
        model.SOOP(pool_size, crossover, mutation, ratio);
        updateAllListField();
    }//GEN-LAST:event_BTN_SOOPActionPerformed

    private void SOOP_KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SOOP_KeyTyped
        updateAllListField();
    }//GEN-LAST:event_SOOP_KeyTyped

    public void updateAllListField() {
        this.Edges_List.setModel(new ListModelEdges(this.model.getEdges()));
        if (this.Edges_List.getModel().getSize() > 0) {
            this.Edges_List.setSelectedIndex(0);
            this.BTN_Edge_Delete.setEnabled(true);
            this.BTN_Edge_Edit.setEnabled(true);
        } else {
            this.Edges_List.setSelectedIndex(-1);
            this.BTN_Edge_Delete.setEnabled(false);
            this.BTN_Edge_Edit.setEnabled(false);
        }
        this.Edges_List.repaint();

        this.Evidence_List.setModel(new ListModelNodes(model.getEvidenceNodes()));
        if (this.Evidence_List.getModel().getSize() > 0) {
            this.Evidence_List.setSelectedIndex(0);

        } else {
            this.Evidence_List.setSelectedIndex(-1);

        }
        this.Evidence_List.repaint();

        this.CM_List.setModel(new ListModelNodes(model.getCMNodes()));
        if (this.CM_List.getModel().getSize() > 0) {
            this.CM_List.setSelectedIndex(0);
            this.BTN_BayesianCMNode_Del.setEnabled(true);
        } else {
            this.CM_List.setSelectedIndex(-1);
            this.BTN_BayesianCMNode_Del.setEnabled(false);

        }
        this.CM_List.repaint();

        this.Nodes_List.setModel(new ListModelNodes(model.getNodes()));
        if (this.Nodes_List.getModel().getSize() > 0) {
            this.Nodes_List.setSelectedIndex(0);
            this.BTN_BayesianNode_Del.setEnabled(true);
            this.BTN_BayesianNode_Edit.setEnabled(true);
        } else {
            this.Nodes_List.setSelectedIndex(-1);
            this.BTN_BayesianNode_Del.setEnabled(false);
            this.BTN_BayesianNode_Edit.setEnabled(false);
        }
        this.Nodes_List.repaint();

        if (CMconn != null && CMconn.isVisible()) {
            CMconn.updateAllListField();
        }

        this.BTN_ShowLCPD.setEnabled(this.model.isLCPDComputed());

        BTN_ComputeUnconditional.setEnabled(this.model.isLCPDComputed());
        BTN_ComputePosterior.setEnabled(this.model.isLCPDComputed() && this.model.isUnconditionalPrComputed());

        if (LOSS_Value.isEnabled()) {
            if (LOSS_Value.getText().isEmpty()) {
                LOSS_Value.setBackground(wrong);
            }
            try {
                loss = Double.parseDouble(LOSS_Value.getText().replaceAll(",", "."));
                if (loss == null || loss.equals(Double.NaN) || loss < 0 || loss > 1) {
                    LOSS_Value.setBackground(wrong);
                } else {
                    LOSS_Value.setBackground(ok);
                    gain = 1d - loss;
                    GAIN_Value.setText(String.format("%.2f", gain).replaceAll(",", "."));
                    GAIN_Value.setBackground(ok);
                }
            } catch (NumberFormatException ex) {
                LOSS_Value.setBackground(wrong);
            }
        }
        if (GAIN_Value.isEnabled()) {
            if (GAIN_Value.getText().isEmpty()) {
                GAIN_Value.setBackground(wrong);
            }
            try {
                gain = Double.parseDouble(GAIN_Value.getText().replaceAll(",", "."));
                if (gain == null || gain.equals(Double.NaN) || gain < 0 || gain > 1) {
                    GAIN_Value.setBackground(wrong);
                } else {
                    GAIN_Value.setBackground(ok);
                    loss = 1d - gain;
                    LOSS_Value.setText(String.format("%.2f", loss).replaceAll(",", "."));
                    LOSS_Value.setBackground(ok);
                }
            } catch (NumberFormatException ex) {
                GAIN_Value.setBackground(wrong);
            }
        }

        if (RATIO_Value.getText().isEmpty()) {
            RATIO_Value.setBackground(wrong);
        }
        try {
            ratio = Double.parseDouble(RATIO_Value.getText().replaceAll(",", "."));
            if (ratio == null || ratio.equals(Double.NaN) || ratio <= 0 || ratio > 1) {
                RATIO_Value.setBackground(wrong);
            } else {
                RATIO_Value.setBackground(ok);
            }
        } catch (NumberFormatException ex) {
            RATIO_Value.setBackground(wrong);
        }

        if (POOL_Value.getText().isEmpty()) {
            POOL_Value.setBackground(wrong);
        }
        try {
            pool_size = Integer.parseInt(POOL_Value.getText().replaceAll(",", "."));
            if (pool_size == null || pool_size <= 2) {
                POOL_Value.setBackground(wrong);
            } else {
                POOL_Value.setBackground(ok);
            }
        } catch (NumberFormatException ex) {
            POOL_Value.setBackground(wrong);
        }

        if (CROSS_Value.getText().isEmpty()) {
            CROSS_Value.setBackground(wrong);
        }
        try {
            crossover = Integer.parseInt(CROSS_Value.getText().replaceAll(",", "."));
            if (crossover == null || crossover < 0) {
                CROSS_Value.setBackground(wrong);
            } else {
                CROSS_Value.setBackground(ok);
            }
        } catch (NumberFormatException ex) {
            CROSS_Value.setBackground(wrong);
        }

        if (MUTATION_Value.getText().isEmpty()) {
            MUTATION_Value.setBackground(wrong);
        }
        try {
            mutation = Integer.parseInt(MUTATION_Value.getText().replaceAll(",", "."));
            if (mutation == null || mutation < 0) {
                MUTATION_Value.setBackground(wrong);
            } else {
                MUTATION_Value.setBackground(ok);
            }
        } catch (NumberFormatException ex) {
            MUTATION_Value.setBackground(wrong);
        }

        if (LOSS_Value.getBackground().equals(wrong)
                || GAIN_Value.getBackground().equals(wrong)
                || POOL_Value.getBackground().equals(wrong)
                || CROSS_Value.getBackground().equals(wrong)
                || MUTATION_Value.getBackground().equals(wrong)
                || RATIO_Value.getBackground().equals(wrong)
                || !this.model.isLCPDComputed()
                || !this.model.isUnconditionalPrComputed()) {
            BTN_SOOP.setEnabled(false);
        } else {
            BTN_SOOP.setEnabled(true);
        }

        if(LOSS_Value.getBackground().equals(ok) && GAIN_Value.getBackground().equals(ok)) {
            ObjectiveFunction.setText("Obj.Funct: "+String.format("%.2f", model.objectiveFunction()));
        }
        
        this.parent.repaintGraph();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_BayesianCMNode_Add;
    private javax.swing.JButton BTN_BayesianCMNode_Conn;
    private javax.swing.JButton BTN_BayesianCMNode_Del;
    private javax.swing.JButton BTN_BayesianNode_Add;
    private javax.swing.JButton BTN_BayesianNode_Del;
    private javax.swing.JButton BTN_BayesianNode_Edit;
    private javax.swing.JButton BTN_ComputeLCPD;
    private javax.swing.JButton BTN_ComputePosterior;
    private javax.swing.JButton BTN_ComputeUnconditional;
    private javax.swing.JButton BTN_Edge_Add;
    private javax.swing.JButton BTN_Edge_Delete;
    private javax.swing.JButton BTN_Edge_Edit;
    private javax.swing.JButton BTN_Evidence_Add;
    private javax.swing.JButton BTN_SOOP;
    private javax.swing.JButton BTN_ShowLCPD;
    private javax.swing.JList CM_List;
    private javax.swing.JLabel CROSS_Label;
    private javax.swing.JTextField CROSS_Value;
    private javax.swing.JList Edges_List;
    private javax.swing.JList Evidence_List;
    private javax.swing.JLabel GAIN_Label;
    private javax.swing.JTextField GAIN_Value;
    private javax.swing.JLabel LOSS_Label;
    private javax.swing.JTextField LOSS_Value;
    private javax.swing.ButtonGroup LossGainRadio;
    private javax.swing.JLabel MUTATION_Label;
    private javax.swing.JTextField MUTATION_Value;
    private javax.swing.JTextField ModelData_Authors_Field;
    private javax.swing.JLabel ModelData_Authors_Label;
    private javax.swing.JTextField ModelData_DOI_Field;
    private javax.swing.JLabel ModelData_DOI_Label;
    private javax.swing.JLabel ModelData_Name_Label;
    private javax.swing.JTextField ModelData_TITLE_value;
    private javax.swing.JList Nodes_List;
    private javax.swing.JLabel ObjectiveFunction;
    private javax.swing.JLabel POOL_Label;
    private javax.swing.JTextField POOL_Value;
    private javax.swing.JPanel Panel_ModelCM;
    private javax.swing.JPanel Panel_ModelData;
    private javax.swing.JPanel Panel_ModelEdges;
    private javax.swing.JPanel Panel_ModelNodes;
    private javax.swing.JPanel Panel_ModelNodes3;
    private javax.swing.JPanel Panel_ModelOperations;
    private javax.swing.JRadioButton RADIO_Gain;
    private javax.swing.JRadioButton RADIO_Loss;
    private javax.swing.JLabel RATIO_Label;
    private javax.swing.JTextField RATIO_Value;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
