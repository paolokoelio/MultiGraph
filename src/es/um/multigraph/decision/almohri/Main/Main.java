/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package es.um.multigraph.decision.almohri.Main;

import java.util.HashSet;
import java.util.Set;

import Graph.Graph;
import Graph.GraphReader;
//import Graph.Graph;
//import Graph.GraphReader;
//import Graph.Optimizer;
//import Graph.SolutionReader;
//import Graph.Vertex;
//import es.um.multigraph.decision.almohri.Graph.*;
//import es.um.multigraph.decision.almohri.Graph.Optimizer;
import Success.InitialSolution;
import es.um.multigraph.decision.almohri.Success.Improvement;
import es.um.multigraph.utils.GoalReader;

/**
 *
 * @author almohri
 */
public class Main {
	public static void main(String[] args) {

		GraphReader reader = new GraphReader();
		Graph g;
		GoalReader goalReader = new GoalReader();
		Set<String> goalNodes = new HashSet<String>();
		
		String path = "";
		
		path = "files/ags/almohri/";
		path = "files/ags/scenario3/";
//		path = "files/ags/scenario1/";
		
		try {
			path = args[0];
			
		} catch (Exception e) {
			System.out.println("Please enter the path to attack graph source files (generated by MulVAL).");
		}

		goalNodes = goalReader.readGoals(path);
		
		g = reader.readGraph(path, false);
//
		System.out.println("Read a total of " + g.vertices.size() + " vertices.");
		System.out.println("Read a total of " + g.totalFactNodes() + " fact vertices.");

		InitialSolution init = new InitialSolution();
		init.findInitialSolution(g, path);

//		Somewhere here put MiniMax solution
		
//		My naive minimax solution
		Improvement imp = new Improvement(path, g, goalNodes);

		imp.solve();

//		SingleOption sopt = new SingleOption();
//		g = sopt.solve(g);
//		System.out.println(((Vertex) g.vertices.get(0)).computedProbability);

	}
}
