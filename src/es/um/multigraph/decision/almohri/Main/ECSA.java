package es.um.multigraph.decision.almohri.Main;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;

import Graph.Graph;
import Graph.GraphReader;
import Success.InitialSolution;
import es.um.multigraph.conf.DBManager;
import es.um.multigraph.conf.FeaturesEnum;
import es.um.multigraph.conf.RiskScale;
import es.um.multigraph.core.MainClass;
import es.um.multigraph.decision.DecisionInterface;
import es.um.multigraph.decision.almohri.Success.Improvement;
import es.um.multigraph.decision.almohri.Utils.GoalReader;
import es.um.multigraph.event.Event;
import es.um.multigraph.event.solution.Solution;
import es.um.multigraph.decision.basegraph.Edge;
import es.um.multigraph.decision.basegraph.JDialogEdge;
import es.um.multigraph.decision.basegraph.Node;
import es.um.multigraph.decision.lwang.AttackGraph;

public class ECSA implements DecisionInterface {

	@Override
	public void log(String txt) {
		// TODO Auto-generated method stub

	}

	@Override
	public void run() {
		// TODO Auto-generated method stub

	}

	@Override
	public void init(MainClass main) {

		GraphReader reader = new GraphReader();
		Graph g;
		GoalReader goalReader = new GoalReader();
		Set<String> goalNodes = new HashSet<String>();

		String path = "";

//		try {
//			path = args[0];
//			
//		} catch (Exception e) {
//			System.out.println("Please enter the path to attack graph source files (generated by MulVAL).");
//		}

		path = "files/ags/almohri/";
		path = "files/ags/scenario3/";
//		path = "files/ags/scenario1/";

		goalNodes = goalReader.readGoals(path);

		g = reader.readGraph(path, false);
//
		System.out.println("Read a total of " + g.vertices.size() + " vertices.");
		System.out.println("Read a total of " + g.totalFactNodes() + " fact vertices.");

		InitialSolution init = new InitialSolution();
		init.findInitialSolution(g, path);

//		Somewhere here put MiniMax solution

//		 scen3 /TODO put in file and remove
//		goalNodes.add("18");
//		goalNodes.add("25");

//		 almohri 5000 nodes case
//		goalNodes.add("579");
//		goalNodes.add("1663");
//		goalNodes.add("1");

		Improvement imp = new Improvement(path, g, goalNodes);

		imp.solve();

	}

	@Override
	public List<Class<? extends Event>> getRecognizedEvent() {
		throw new UnsupportedOperationException("Not supported yet.");

	}

	@Override
	public List<FeaturesEnum> getEnabledFeatures() {
		throw new UnsupportedOperationException("Not supported yet.");
	}

	@Override
	public Solution react(Event e) {
		throw new UnsupportedOperationException("Not supported yet.");
	}

	@Override
	public RiskScale getOverallRisk() {
		throw new UnsupportedOperationException("Not supported yet.");
	}

	@Override
	public void loadState(DBManager database) {
		throw new UnsupportedOperationException("Not supported yet.");
	}

	@Override
	public String getPaperName() {
		return "ECSA Almohri et al.";

	}

	@Override
	public String getPaperAuthors() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public URI getPaperDOI() {
		try {
			return new URI("https://doi.org/"); // FIXME
		} catch (URISyntaxException ex) {
			Logger.getLogger(AttackGraph.class.getName()).log(Level.SEVERE, null, ex);
		}
		return null;
	}

	@Override
	public void stop() {
		// TODO Auto-generated method stub

	}

	@Override
	public JFrame getModelConfigurationFrame() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<Edge> getEdgesClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<Node> getNodesClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Collection<Node> getNodes() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Collection<Edge> getEdges() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void addNode(Node node) {
		// TODO Auto-generated method stub

	}

	@Override
	public void addEdge(Edge edge) {
		// TODO Auto-generated method stub

	}

	@Override
	public void delNode(Node n) {
		// TODO Auto-generated method stub

	}

	@Override
	public void delEdge(Edge e) {
		// TODO Auto-generated method stub

	}

}
